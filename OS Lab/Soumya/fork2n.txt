#include<sys/types.h>
#include<unistd.h>
#include<sys/wait.h>
#include<stdio.h>
#include<stdlib.h>
void delay(int x){
    for (int b= 1; b <= x; b++)
        for (int c = 1; c <= 32767; c++)
            for (int d = 1; d <= 32767; d++)
                {}
}

int main()
{

   int ret,status;

   unsigned long int i=0;
  while(i++<5){
   ret = fork();

   if(ret<0){ //If failed to create child
           perror("error in fork");
           printf("the final value of i is %lu\n", i);
           exit(1);
            }


   if(ret>0){ //In parent context
            delay(1);
           printf("In PARENT .. ppid is %lu ...and pid is %lu\n",
  getppid(),getpid());
 delay(5);  
          continue;
            }
   
   if(ret==0) { //In child context
                           printf("Hello Welcome to Child process No. %d\n",i);

  if(i==1){
                                printf("in child .. ppid is %lu ...and pid is %lu\n",getppid(),getpid());
                                printf("OK BYE!\n\n");
                        ret=execl("/usr/bin/gcc","gcc","/home/desd/a3/while1.c","-o","wh",NULL);
                                delay(5);
                               exit(0);
                                        }
  if( i==2){
                                printf("in child .. ppid is %lu ...and pid is %lu\n",getppid(),getpid());
                                printf("OK BYE!\n\n");
                       ret=execl("/usr/bin/libreoffice","/home/desd/a3/","EOS_Linux_assignment3_Feb2018.pdf",NULL);
                                delay(5);
                                exit(0);}



       if( i==3 ){
                                printf("in child .. ppid is %lu ...and pid is %lu\n",getppid(),getpid());
                                printf("OK BYE!\n\n");
                                 ret=execl("/home/desd/a3/wh","wh",NULL);
                                delay(5);
                                exit(0);}

      if(i==4 ){
                        printf("in child .. ppid is %lu ...and pid is %lu\n",getppid(),getpid());
                        printf("4th CHILD ready to suscide\n\n");
                        delay(5);
                        //kill(getpid(),SIGKILL);

                        exit(1);
                        }

      if(i==5 ){
                        printf("in child .. ppid is %lu ...and pid is %lu\n",getppid(),getpid());
                        printf("5th CHILD FAILED !!!!!\n\n");
                        delay(5);
                        //while(1);
                        exit(1);}
 
           break;  
        }
 }

 if(ret>0)
 {
   while(1){
                ret = waitpid(-1,&status,0);
   
 if(ret>0){
        printf("Killing child %d\n",(i++)-5);

                if(WIFEXITED(status))  
                {

                     if(WEXITSTATUS(status) == 0){
                     printf("normal and successful death\n");}

                     else{            
                     printf("normal and unsuccessful death\n");}
                }

                          else{
                                printf("abnormal and unsuccessful death\n");
                              }
          }

                     if(ret<0) {
                                printf("Parent Died\n");
                                 exit(0);}
         }
  }
            printf("Parent Died(ret -1)\n");
            exit (0);
}
